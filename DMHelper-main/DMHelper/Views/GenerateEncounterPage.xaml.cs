using CommunityToolkit.Mvvm.DependencyInjection;
using DMHelper.ViewModels;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace DMHelper.Views
{
    public sealed partial class GenerateEncounterPage : Page
    {
        public GenerateEncounterViewModel ViewModel { get; }

        static HttpClient client = new HttpClient();

        public List<MonstersViewModel> Monsters;
        public ObservableCollection<EncountersViewModel> Encounters;

        // Object used as base for adding new content to DB.
        public EncountersViewModel newEncounter = new();
        public EnvironmentViewModel Environment = new();

        // Variables used for encounter generation.
        int playerAmount;
        int playerLevel;
        string difficulty;
        string selectedEnvironment;
        string encounterName;

        public GenerateEncounterPage()
        {
            ViewModel = Ioc.Default.GetService<GenerateEncounterViewModel>();
            InitializeComponent();

            Task.Run(() => this.GetMonsters()).Wait();
        }

        void generateEncounter(object sender, RoutedEventArgs e)
        {

            int environmentId = 0;
            var xpThreshold = 0;
            var currentXpValue = 0;
            var playerThreshold = 0;
            var monsterToAdd = 0;

            // Lists used for generation storage.
            List<MonstersViewModel> newEncounterMonsterList = new List<MonstersViewModel>();
            List<MonstersViewModel> tempMonsterList = new List<MonstersViewModel>();


            Random rnd = new Random();

            // Determine playerThreshold which is a single player xp value used to calculate xpThreshold for the encounter.
            if (playerLevel == 1 && difficulty == "Easy")
            {
                playerThreshold = 25;
            }
            else if (playerLevel == 1 && difficulty == "Medium" || playerLevel == 2 && difficulty == "Easy")
            {
                playerThreshold = 50;
            }
            else if (playerLevel == 1 && difficulty == "Hard" || playerLevel == 3 && difficulty == "Easy")
            {
                playerThreshold = 75;
            }
            else if (playerLevel == 1 && difficulty == "Deadly" || playerLevel == 2 && difficulty == "Medium")
            {
                playerThreshold = 100;
            }
            else if (playerLevel == 2 && difficulty == "Hard" || playerLevel == 3 && difficulty == "Medium")
            {
                playerThreshold = 150;
            }
            else if (playerLevel == 3 && difficulty == "Hard")
            {
                playerThreshold = 225;
            }
            else
            {
                playerThreshold = 400;
            }

            // Determine xpThreshold for given encounter.
            xpThreshold = playerThreshold * playerAmount;

            // Generete initial temp list of monsters from DB based on constraints defined above.
            tempMonsterList = Monsters.Where(monster => monster.Experience < xpThreshold && monster.Environment.Name == selectedEnvironment).ToList();

            tempMonsterList.ForEach(m => m.Amount = 1);

            // This loop runs until a monster pool has been created to fill the calculated xpThreshold.
            while (currentXpValue < xpThreshold)
            {
                // If there are no more monsters to pick from with remaining xp pool, break loop by forcing the value.
                if (tempMonsterList.Count == 0)
                {
                    currentXpValue = xpThreshold + 1;
                    break;
                }

                // Picks a number at random from the interval generated by current length of tempMonsterList.
                monsterToAdd = rnd.Next(tempMonsterList.Count);

                // Check if list allready contains monster, if yes iterate count, if no add.
                if (newEncounterMonsterList.Contains(tempMonsterList[monsterToAdd]))
                {
                    newEncounterMonsterList.Find(m => m.Id == tempMonsterList[monsterToAdd].Id).Amount++;
                }
                else
                {
                    newEncounterMonsterList.Add(tempMonsterList[monsterToAdd]);
                }

                // Increase currentXpValue with xp value of newest monster.
                currentXpValue = currentXpValue + tempMonsterList[monsterToAdd].Experience;

                // Reduce templist monsters where xp value is greater than the amount of xp left of xpThreshold.
                tempMonsterList = tempMonsterList.Where(monster => monster.Experience < (xpThreshold - currentXpValue)).ToList();
            }

            switch (selectedEnvironment)
            {

                case "Forest":
                    environmentId = 10;
                    break;

                case "Underdark":
                    environmentId = 17;
                    break;

                case "Urban":
                    environmentId = 19;
                    break;
                default:
                    environmentId = 10;
                    break;
            }

            // Add enviroment info.
            Environment.Id = environmentId;
            Environment.Name = selectedEnvironment;

            // Add the monster list and environment to the encounter.
            newEncounter.Monsters = newEncounterMonsterList;
            newEncounter.Name = encounterName;
            newEncounter.Environment = Environment;

            // Call method to create encounter.
            createEncounter();
        }

        void createEncounter()
        {
            // Convert encounter into JSON.
            var encounterJson = JsonSerializer.Serialize(newEncounter);

            // Convert http post request.
            var httpPostRequest = new StringContent(encounterJson, Encoding.UTF8, "application/json");

            // Send http post reset to add new encounter.
            client.PostAsync("https://localhost:44374/api/Encounter/", httpPostRequest);

            // Reset newEncounter.
            newEncounter.Name = null;
            newEncounter.Environment = null;
            newEncounter.Monsters = null;
        }

        public async Task GetMonsters()
        {
            // Gets the data from the API in JSON format.
            var apiData = client.GetStreamAsync("https://localhost:44374/api/Monster");

            // Converts the JSON data to a list format.
            Monsters = await JsonSerializer.DeserializeAsync<List<MonstersViewModel>>(await apiData);

        }

    }
}
